/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;


public class addamount extends javax.swing.JFrame {

    /**
     * Creates new form addamount
     */
    private String loggedInUserName;
    public addamount(String user) {
        this.loggedInUserName=user;
        initComponents();
    }
    private static int getActiveCustomerTripId(String username) {
        int activeCustomerTripId = -1; // Default value if not found

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/javapro", "root", "0000")) {
            String query = "SELECT customertripid FROM customerstripdetails WHERE customerid = ? AND state = 'active'";
            try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, username);

                try (ResultSet resultSet = pstmt.executeQuery()) {
                    if (resultSet.next()) {
                        activeCustomerTripId = resultSet.getInt("customertripid");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or log the error as needed
        }

        return activeCustomerTripId;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addoredit = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        chargetype = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        Amount = new javax.swing.JTextField();
        endtrip = new javax.swing.JButton();
        Ok = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 400));
        setPreferredSize(new java.awt.Dimension(1050, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("What would you like to perform  :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, -1, -1));

        addoredit.setBackground(new java.awt.Color(0, 0, 0));
        addoredit.setForeground(new java.awt.Color(255, 255, 255));
        addoredit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add expense", "Edit Expense", " " }));
        addoredit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addoredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addoreditActionPerformed(evt);
            }
        });
        getContentPane().add(addoredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 160, 120, 30));

        jLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Choose an expense to add             :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 290, -1));

        chargetype.setBackground(new java.awt.Color(51, 51, 51));
        chargetype.setForeground(new java.awt.Color(255, 255, 255));
        chargetype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "accommodationcharge", "transportcharge", "foodcharge", "activitiescharge", "shoppingchrage", "entertainmentcharge" }));
        chargetype.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chargetype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargetypeActionPerformed(evt);
            }
        });
        getContentPane().add(chargetype, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 230, 190, 30));

        jLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter the Amount                          :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, 300, -1));

        Amount.setBackground(new java.awt.Color(102, 102, 102));
        Amount.setForeground(new java.awt.Color(255, 255, 255));
        Amount.setMargin(new java.awt.Insets(2, 2, 2, 2));
        Amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmountActionPerformed(evt);
            }
        });
        getContentPane().add(Amount, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 300, 160, 30));

        endtrip.setBackground(new java.awt.Color(0, 0, 0));
        endtrip.setForeground(new java.awt.Color(255, 255, 255));
        endtrip.setText("End trip");
        endtrip.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        endtrip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endtripMouseClicked(evt);
            }
        });
        getContentPane().add(endtrip, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 490, 90, -1));

        Ok.setBackground(new java.awt.Color(0, 0, 0));
        Ok.setForeground(new java.awt.Color(255, 255, 255));
        Ok.setText("Ok");
        Ok.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OkMouseClicked(evt);
            }
        });
        Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkActionPerformed(evt);
            }
        });
        getContentPane().add(Ok, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 490, -1, -1));

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Cancel");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 500, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Downloads\\addamount org.jpg")); // NOI18N
        jLabel5.setMaximumSize(new java.awt.Dimension(1069, 739));
        jLabel5.setMinimumSize(new java.awt.Dimension(1069, 739));
        jLabel5.setPreferredSize(new java.awt.Dimension(1039, 730));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1070, 750));

        setSize(new java.awt.Dimension(1048, 707));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addoreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addoreditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addoreditActionPerformed

    private void AmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AmountActionPerformed

    private void OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OkActionPerformed

    private void OkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OkMouseClicked
                                      
     String operation = addoredit.getSelectedItem().toString(); // "Add expense" or "Edit Expense"
    String selectedExpense = chargetype.getSelectedItem().toString();
    selectedExpense = selectedExpense + "id";

    // Get the active customertripid
    int activeCustomerTripId = getActiveCustomerTripId(loggedInUserName);

    if (activeCustomerTripId != -1) {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/javapro", "root", "0000")) {
            double amount = Double.parseDouble(Amount.getText());

            switch (operation) {
                case "Add expense":
                    // Add expense
                    String updateQuery = "UPDATE customerstripdexp SET " + selectedExpense + " = " + selectedExpense + " + ? WHERE customertripid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {
                        pstmt.setDouble(1, amount);
                        pstmt.setInt(2, activeCustomerTripId);
                        pstmt.executeUpdate();
                        System.out.println("Expense added successfully!");
                    } catch (SQLException e) {
                        e.printStackTrace();
                        System.out.println("Error adding expense: " + e.getMessage());
                        // Handle the error appropriately, e.g., show a message to the user
                        return;
                    }
                    break;
                case "Edit Expense":
                    // Edit expense
                    updateQuery = "UPDATE customerstripdexp SET " + selectedExpense + " = " + selectedExpense + " - ? WHERE customertripid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {
                        pstmt.setDouble(1, amount);
                        pstmt.setInt(2, activeCustomerTripId);
                        pstmt.executeUpdate();
                        System.out.println("Expense edited successfully!");
                    } catch (SQLException e) {
                        e.printStackTrace();
                        System.out.println("Error editing expense: " + e.getMessage());
                        // Handle the error appropriately, e.g., show a message to the user
                        return;
                    }
                    break;
                default:
                    System.out.println("Invalid operation selected.");
                    return;
            }
        } catch (SQLException | NumberFormatException e) {
            e.printStackTrace();
            System.out.println("Error processing operation: " + e.getMessage());
            // Display error in a checkbox or handle it as needed
            return;
        }

        // Ask the user whether to continue or leave
        int continueOption = JOptionPane.showOptionDialog(
            this,
            "Expense added successfully! Do you want to continue editing expenses?",
            "Success",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            null,
            null
        );

        if (continueOption == JOptionPane.YES_OPTION) {
            // Reset input values
            addoredit.setSelectedIndex(0);
            chargetype.setSelectedIndex(0);
            Amount.setText("");
        } else {
            // Move to the menu page (replace this with the appropriate navigation code)
            menu menuPage = new menu(loggedInUserName); 
            menuPage.setVisible(true);
            this.dispose(); // Close the current frame
        }
    } else {
        System.out.println("No active trip found for user: " + loggedInUserName);
        // Handle the case where no active trip is found
    }
    }//GEN-LAST:event_OkMouseClicked

    private void chargetypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargetypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chargetypeActionPerformed

    private void endtripMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endtripMouseClicked
       int activeCustomerTripId = getActiveCustomerTripId(loggedInUserName);

    if (activeCustomerTripId != -1) {
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to close the trip?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
            // Ask for final reviews and ratings
            String finalReviewInput = JOptionPane.showInputDialog(this, "Please provide your final reviews:");
            String finalRatingsInput = JOptionPane.showInputDialog(this, "Please provide your final ratings (out of 5):");

            if (finalReviewInput != null && !finalReviewInput.isEmpty() && finalRatingsInput != null && !finalRatingsInput.isEmpty()) {
                try {
                    double finalRatings = Double.parseDouble(finalRatingsInput);

                    // Perform actions to close the trip and store final reviews/ratings
                    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/javapro", "root", "0000")) {
                        // Update state in customerstripdetails table
                        String closeTripQuery = "UPDATE customerstripdetails SET state = ? WHERE customertripid = ?";
                        try (PreparedStatement pstmt = conn.prepareStatement(closeTripQuery)) {
                            pstmt.setString(1, "Closed"); // Set the appropriate state value
                            pstmt.setInt(2, activeCustomerTripId);
                            pstmt.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Trip closed successfully!");

                            // Store final reviews/ratings in customerstripdexp table
                            String storeFinalReviewsQuery = "UPDATE customerstripdexp SET review = ?, ratings = ? WHERE customertripid = ?";
                            try (PreparedStatement finalReviewsPstmt = conn.prepareStatement(storeFinalReviewsQuery)) {
                                finalReviewsPstmt.setString(1, finalReviewInput);
                                finalReviewsPstmt.setDouble(2, finalRatings);
                                finalReviewsPstmt.setInt(3, activeCustomerTripId);
                                finalReviewsPstmt.executeUpdate();
                                JOptionPane.showMessageDialog(null, "Final reviews and ratings stored successfully!");
                                this.setVisible(false);
                                new menu(loggedInUserName).setVisible(true);
                            } catch (SQLException e) {
                                e.printStackTrace();
                                System.out.println("Error storing final reviews and ratings: " + e.getMessage());
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                            System.out.println("Error closing trip: " + e.getMessage());
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        System.out.println("Error connecting to the database: " + e.getMessage());
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid input for final ratings. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Final reviews and ratings are required.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        System.out.println("No active trip found for user: " + loggedInUserName);
        // Handle the case where no active trip is found
    }
    }//GEN-LAST:event_endtripMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_jButton3MouseClicked

    /**
     * @param args the command line arguments
     */
   

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Amount;
    private javax.swing.JButton Ok;
    private javax.swing.JComboBox<String> addoredit;
    private javax.swing.JComboBox<String> chargetype;
    private javax.swing.JButton endtrip;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
