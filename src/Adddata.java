/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.awt.Image;
import javax.swing.ImageIcon;
import java.awt.Color;
public class Adddata extends javax.swing.JFrame {
     private Connection con;

    /**
     * Creates new form Adddata
     */
    public Adddata() {
         initComponents();
        // Initialize the database connection
        try {
            String url = "jdbc:mysql://localhost:3306/javasam";
            String user = "root";
            String pass = "0000";
             Connection con = DriverManager.getConnection(url, user, pass);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    public  void Add() {
        try {
            // Establish the database connection
            String url = "jdbc:mysql://localhost:3306/javasam";
            String user = "root";
            String pass = "0000";
            Connection con = DriverManager.getConnection(url, user, pass);
            
        }
         catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
     }
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {
       
    }

        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        choose = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Which table would you like to add data:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "trips", "tripcategory", "membersincluded", "tripduration", "accomodationcharge", "TransportCharge", "FoodCharge", "ActivitiesCharge", "ShoppingExpence ", "EntertainmentExpence", " " }));

        choose.setText("choose");
        choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jButton1)
                        .addGap(128, 128, 128)
                        .addComponent(choose)))
                .addContainerGap(352, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choose)
                    .addComponent(jButton1))
                .addGap(107, 107, 107))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseActionPerformed
        String selectedTable = (String) jComboBox1.getSelectedItem();
        switch (selectedTable) {
        case "trips":
            trips();
            break;
        case "tripcategory":
                tripcategory();
                break;
        case "membersincluded":
                membersincluded();
                break;
        case "tripduration":
               tripduration();
                break;
        case "accomodationcharge":
                accomodationcharge();
                break;
        case "TransportCharge":
                TransportCharge();
                break;
        case "FoodCharge":
                FoodCharge();
                break;
        case "ActivitiesCharge":
                ActivitiesCharge();
                break;
        case "ShoppingExpence ":
               ShoppingExpence();
                break;
        case "EntertainmentExpence":
                EntertainmentExpence();
                break;
            

             default:
                 break;
    }
    }//GEN-LAST:event_chooseActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
         this.setVisible(false);
        new Admin1().setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked
private void trips(){
     try {
            // Prompt the user for input
            String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
            String tripName = JOptionPane.showInputDialog("Enter Trip Name:");
            String tripStart = JOptionPane.showInputDialog("Enter Trip Start Date:");
            String tripEnd = JOptionPane.showInputDialog("Enter Trip End Date:");
            String description = JOptionPane.showInputDialog("Enter Trip Description:");

            // Insert user input into the "trips" table
            String insertQuery = "INSERT INTO trips (tripid, tripname, tripstart, tripend, description) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement insertPst = con.prepareStatement(insertQuery);
            insertPst.setString(1, tripId);
            insertPst.setString(2, tripName);
            insertPst.setString(3, tripStart);
            insertPst.setString(4, tripEnd);
            insertPst.setString(5, description);

            int rowsAffected = insertPst.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Data added to Trips table successfully");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add data to Trips table");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

}
private void tripduration() {
    try {
        // Prompt the user for input
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String noOfDays = JOptionPane.showInputDialog("Enter Number of Days:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "tripduration" table
        String insertQuery = "INSERT INTO tripduration (durationid, noofdays, description) VALUES (?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, durationId);
        insertPst.setString(2, noOfDays);
        insertPst.setString(3, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to tripduration table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to tripduration table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void membersincluded() {
    try {
        // Prompt the user for input
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String totalMember = JOptionPane.showInputDialog("Enter Total Member:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "membersincluded" table
        String insertQuery = "INSERT INTO membersincluded (membersetid, totalmemeber, description) VALUES (?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, memberSetId);
        insertPst.setString(2, totalMember);
        insertPst.setString(3, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to membersincluded table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to membersincluded table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void tripcategory() {
    try {
        // Prompt the user for input
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String categoryName = JOptionPane.showInputDialog("Enter Category Name:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "tripcategory" table
        String insertQuery = "INSERT INTO tripcategory (categoryid, categoryname, description) VALUES (?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, categoryId);
        insertPst.setString(2, categoryName);
        insertPst.setString(3, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to tripcategory table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to tripcategory table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void accomodationcharge() {
    try {
        // Prompt the user for input
        String accommodationChargeId = JOptionPane.showInputDialog("Enter Accommodation Charge ID:");
        String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String amount = JOptionPane.showInputDialog("Enter Amount:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "accommodationcharge" table
        String insertQuery = "INSERT INTO accommodationcharge (accommodationchargeid, tripid, categoryid, membersetid, durationid, amount, description) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, accommodationChargeId);
        insertPst.setString(2, tripId);
        insertPst.setString(3, categoryId);
        insertPst.setString(4, memberSetId);
        insertPst.setString(5, durationId);
        insertPst.setFloat(6, Float.parseFloat(amount));
        insertPst.setString(7, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to accommodationcharge table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to accommodationcharge table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void TransportCharge() {
    try {
        // Prompt the user for input
        String transportChargeId = JOptionPane.showInputDialog("Enter Transport Charge ID:");
        String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String amount = JOptionPane.showInputDialog("Enter Amount:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "transportcharge" table
        String insertQuery = "INSERT INTO transportcharge (transportchargeid, tripid, membersetid, categoryid, durationid, amount, description) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, transportChargeId);
        insertPst.setString(2, tripId);
        insertPst.setString(3, memberSetId);
        insertPst.setString(4, categoryId);
        insertPst.setString(5, durationId);
        insertPst.setFloat(6, Float.parseFloat(amount));
        insertPst.setString(7, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to transportcharge table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to transportcharge table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void FoodCharge() {
    try {
        // Prompt the user for input
        String foodChargeId = JOptionPane.showInputDialog("Enter Food Charge ID:");
        String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String amount = JOptionPane.showInputDialog("Enter Amount:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "foodcharge" table
        String insertQuery = "INSERT INTO foodcharge (foodchargeid, tripid, membersetid, categoryid, durationid, amount, description) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, foodChargeId);
        insertPst.setString(2, tripId);
        insertPst.setString(3, memberSetId);
        insertPst.setString(4, categoryId);
        insertPst.setString(5, durationId);
        insertPst.setFloat(6, Float.parseFloat(amount));
        insertPst.setString(7, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to foodcharge table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to foodcharge table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void ActivitiesCharge() {
    try {
        // Prompt the user for input
        String activitiesChargeId = JOptionPane.showInputDialog("Enter Activities Charge ID:");
        String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String amount = JOptionPane.showInputDialog("Enter Amount:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "activitiescharge" table
        String insertQuery = "INSERT INTO activitiescharge (activitieschargeid, tripid, membersetid, categoryid, durationid, amount, description) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, activitiesChargeId);
        insertPst.setString(2, tripId);
        insertPst.setString(3, memberSetId);
        insertPst.setString(4, categoryId);
        insertPst.setString(5, durationId);
        insertPst.setFloat(6, Float.parseFloat(amount));
        insertPst.setString(7, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to activitiescharge table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to activitiescharge table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void ShoppingExpence() {
    try {
        // Prompt the user for input
        String shoppingChargeId = JOptionPane.showInputDialog("Enter Shopping Charge ID:");
        String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String amount = JOptionPane.showInputDialog("Enter Amount:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "shoppingexpence" table
        String insertQuery = "INSERT INTO shoppingexpence (shoppingchargeid, tripid, categoryid, membersetid, durationid, amount, description) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, shoppingChargeId);
        insertPst.setString(2, tripId);
        insertPst.setString(3, categoryId);
        insertPst.setString(4, memberSetId);
        insertPst.setString(5, durationId);
        insertPst.setFloat(6, Float.parseFloat(amount));
        insertPst.setString(7, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to shoppingexpence table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to shoppingexpence table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    private void EntertainmentExpence() {
    try {
        // Prompt the user for input
        String entertainmentChargeId = JOptionPane.showInputDialog("Enter Entertainment Charge ID:");
        String tripId = JOptionPane.showInputDialog("Enter Trip ID:");
        String categoryId = JOptionPane.showInputDialog("Enter Category ID:");
        String memberSetId = JOptionPane.showInputDialog("Enter Member Set ID:");
        String durationId = JOptionPane.showInputDialog("Enter Duration ID:");
        String amount = JOptionPane.showInputDialog("Enter Amount:");
        String description = JOptionPane.showInputDialog("Enter Description:");

        // Insert user input into the "entertainmentexpence" table
        String insertQuery = "INSERT INTO entertainmentexpence (entertainmentchargeid, tripid, categoryid, membersetid, durationid, amount, description) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPst = con.prepareStatement(insertQuery);
        insertPst.setString(1, entertainmentChargeId);
        insertPst.setString(2, tripId);
        insertPst.setString(3, categoryId);
        insertPst.setString(4, memberSetId);
        insertPst.setString(5, durationId);
        insertPst.setFloat(6, Float.parseFloat(amount));
        insertPst.setString(7, description);

        int rowsAffected = insertPst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Data added to entertainmentexpence table successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add data to entertainmentexpence table");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adddata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adddata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adddata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adddata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Adddata().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choose;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
