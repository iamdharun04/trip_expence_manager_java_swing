/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
import javax.swing.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;

     
public class viewtable extends javax.swing.JFrame {
    private Connection con;
   

    /**
     * Creates new form viewtable
     */
    public viewtable() {
       
        initComponents();
        // Initialize the database connection
        try {
            String url = "jdbc:mysql://localhost:3306/javapro";
            String user = "root";
            String pass = "0000";
            con = DriverManager.getConnection(url, user, pass);
        } catch (Exception e) {
             JOptionPane.showMessageDialog(null, e);
        }
    }
    private DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
    ResultSetMetaData metaData = rs.getMetaData();

    // Names of columns
    Vector<String> columnNames = new Vector<>();
    int columnCount = metaData.getColumnCount();
    for (int column = 1; column <= columnCount; column++) {
        columnNames.add(metaData.getColumnName(column));
    }

    // Data of the table
    Vector<Vector<Object>> data = new Vector<>();
    while (rs.next()) {
        Vector<Object> vector = new Vector<>();
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            vector.add(rs.getObject(columnIndex));
        }
        data.add(vector);
    }

    return new DefaultTableModel(data, columnNames);
}
   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        choose = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Choose the table to be viewed:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 180, -1));

        choose.setText("choose");
        choose.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                chooseMouseDragged(evt);
            }
        });
        choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseActionPerformed(evt);
            }
        });
        getContentPane().add(choose, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 310, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "users", "trips", "tripcategory", "membersincluded", "tripduration", "accomodationcharge", "TransportCharge", "FoodCharge", "ActivitiesCharge", "ShoppingExpence ", "EntertainmentExpence", "CustomersTripDetails", "Customersexpence" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 160, -1, -1));

        back.setText("back");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, -1, -1));

        setSize(new java.awt.Dimension(1084, 607));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void chooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseActionPerformed
        String selectedTable = (String) jComboBox1.getSelectedItem();
        switch (selectedTable) {
        case "users":
            users();
            break;
        case "trips":
            trips();
            break;
        case "tripcategory":
                tripcategory();
                break;
        case "membersincluded":
                membersincluded();
                break;
        case "tripduration":
               tripduration();
                break;
        case "accomodationcharge":
                accomodationcharge();
                break;
        case "TransportCharge":
                TransportCharge();
                break;
        case "FoodCharge":
                FoodCharge();
                break;
        case "ActivitiesCharge":
                ActivitiesCharge();
                break;
        case "ShoppingExpence ":
               ShoppingExpence();
                break;
        case "EntertainmentExpence":
                EntertainmentExpence();
                break;
            case "CustomersTripDetails":
                CustomersTripDetails();
                break;
            case "Customersexpence":
                Customersexpence();
                break;

             default:
                 break;
    }
    }//GEN-LAST:event_chooseActionPerformed

    private void chooseMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseMouseDragged
        
    }//GEN-LAST:event_chooseMouseDragged

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        this.setVisible(false);
        new Admin1().setVisible(true);
    }//GEN-LAST:event_backMouseClicked

    /**
     * @param args the command line arguments
     */
    private void users(){
             try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM users" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    private void trips(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM trips" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
     
    private void tripcategory(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM tripcategory" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void membersincluded(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM membersincluded" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void tripduration(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM tripduration" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void accomodationcharge(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM accommodationcharge" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void TransportCharge(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM transportcharge" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void FoodCharge(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM foodcharge" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void ActivitiesCharge(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM activitiescharge" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void ShoppingExpence(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM shoppingexpence" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void EntertainmentExpence(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM entertainmentexpence" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
   
    
    private void CustomersTripDetails(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM  customerstripdetails" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    private void Customersexpence(){
           try {
            // Query to fetch all data from the selected table
            String query = "SELECT * FROM Customerstripdexp" ;
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Create a JTable to display the data
            JTable table = new JTable(buildTableModel(rs));

            // Create a JScrollPane to add the table to it
            JScrollPane scrollPane = new JScrollPane(table);

            // Create a JFrame to display the table
            JFrame frame = new JFrame("Viewing Table: ");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(scrollPane);
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        
    }
    
        
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewtable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton choose;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
