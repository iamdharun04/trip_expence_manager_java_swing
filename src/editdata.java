/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.awt.Image;
import javax.swing.ImageIcon;
import java.awt.Color;
public class editdata extends javax.swing.JFrame {
private Connection con;
    /**
     * Creates new form editdata
     */
    public editdata() {
        initComponents();
        try {
            String url = "jdbc:mysql://localhost:3306/javasam";
            String user = "root";
            String pass = "0000";
            con = DriverManager.getConnection(url, user, pass);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        choose = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("enter the table to edit:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "users", "trips", "tripcategory", "membersincluded", "tripduration", "accomodationcharge", "TransportCharge", "FoodCharge", "ActivitiesCharge", "ShoppingExpence ", "EntertainmentExpence", " " }));

        choose.setText("choose");
        choose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseMouseClicked(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jButton1)
                        .addGap(212, 212, 212)
                        .addComponent(choose)))
                .addContainerGap(526, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choose)
                    .addComponent(jButton1))
                .addContainerGap(274, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseMouseClicked
       String selectedTable = (String) combo.getSelectedItem();
       switch (selectedTable) {
        case "trips":
            trips();
            break;
        case "tripcategory":
                tripcategory();
                break;
        case "membersincluded":
                membersincluded();
                break;
        case "tripduration":
               tripduration();
                break;
        case "accomodationcharge":
                accomodationcharge();
                break;
        case "TransportCharge":
                TransportCharge();
                break;
        case "FoodCharge":
                FoodCharge();
                break;
        case "ActivitiesCharge":
                ActivitiesCharge();
                break;
        case "ShoppingExpence ":
               ShoppingExpence();
                break;
        case "EntertainmentExpence":
                EntertainmentExpence();
                break;
            

             default:
                 break;
    } 
    }//GEN-LAST:event_chooseMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
         this.setVisible(false);
        new Admin1().setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked
    private void users() {
        String username = JOptionPane.showInputDialog("Enter the username to edit:");
        if (username != null && !username.isEmpty()) {
            String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
            if (selectedColumn != null && !selectedColumn.isEmpty()) {
                String newValue = JOptionPane.showInputDialog("Enter the new value:");
                if (newValue != null) {
                    try {
                        String updateQuery = "UPDATE users SET " + selectedColumn + " = ? WHERE username = ?";
                        try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                            preparedStatement.setString(1, newValue);
                            preparedStatement.setString(2, username);

                            int rowsAffected = preparedStatement.executeUpdate();

                            if (rowsAffected > 0) {
                                JOptionPane.showMessageDialog(null, "User data updated successfully!");
                            } else {
                                JOptionPane.showMessageDialog(null, "User not found or update failed.");
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                    }
                }
            }
        }
    }
    private void trips() {
    String tripId = JOptionPane.showInputDialog("Enter the trip ID to edit:");
    if (tripId != null && !tripId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE trips SET " + selectedColumn + " = ? WHERE tripid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, tripId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Trip data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Trip not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
    private void tripcategory() {
    String categoryId = JOptionPane.showInputDialog("Enter the category ID to edit:");
    if (categoryId != null && !categoryId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE tripcategory SET " + selectedColumn + " = ? WHERE categoryid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, categoryId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Trip Category data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Trip Category not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
    private void membersincluded() {
    String memberSetId = JOptionPane.showInputDialog("Enter the member set ID to edit:");
    if (memberSetId != null && !memberSetId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE membersincluded SET " + selectedColumn + " = ? WHERE membersetid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, memberSetId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Members Included data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Members Included not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
    private void tripduration() {
    String durationId = JOptionPane.showInputDialog("Enter the duration ID to edit:");
    if (durationId != null && !durationId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE tripduration SET " + selectedColumn + " = ? WHERE durationid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, durationId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Trip Duration data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Trip Duration not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
    private void accomodationcharge() {
    String chargeId = JOptionPane.showInputDialog("Enter the accommodation charge ID to edit:");
    if (chargeId != null && !chargeId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE accommodationcharge SET " + selectedColumn + " = ? WHERE accommodationchargeid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, chargeId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Accommodation Charge data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Accommodation Charge not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
    private void FoodCharge() {
    String chargeId = JOptionPane.showInputDialog("Enter the food charge ID to edit:");
    if (chargeId != null && !chargeId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE foodcharge SET " + selectedColumn + " = ? WHERE foodchargeid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, chargeId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Food Charge data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Food Charge not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
private void ShoppingExpence() {
    String shoppingChargeId = JOptionPane.showInputDialog("Enter the shopping charge ID to edit:");
    if (shoppingChargeId != null && !shoppingChargeId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE shoppingexpence SET " + selectedColumn + " = ? WHERE shoppingchargeid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, shoppingChargeId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Shopping Expence data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Shopping Expence not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editdata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editdata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editdata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editdata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editdata().setVisible(true);
            }
        });
    }
    private void TransportCharge() {
    String chargeId = JOptionPane.showInputDialog("Enter the transport charge ID to edit:");
    if (chargeId != null && !chargeId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE transportcharge SET " + selectedColumn + " = ? WHERE transportchargeid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, chargeId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Transport Charge data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Transport Charge not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
    private void ActivitiesCharge() {
    String chargeId = JOptionPane.showInputDialog("Enter the activities charge ID to edit:");
    if (chargeId != null && !chargeId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE activitiescharge SET " + selectedColumn + " = ? WHERE activitieschargeid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, chargeId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Activities Charge data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Activities Charge not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}
private void EntertainmentExpence() {
    String entertainmentChargeId = JOptionPane.showInputDialog("Enter the entertainment charge ID to edit:");
    if (entertainmentChargeId != null && !entertainmentChargeId.isEmpty()) {
        String selectedColumn = JOptionPane.showInputDialog("Enter the column to edit:");
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            String newValue = JOptionPane.showInputDialog("Enter the new value:");
            if (newValue != null) {
                try {
                    String updateQuery = "UPDATE entertainmentexpence SET " + selectedColumn + " = ? WHERE entertainmentchargeid = ?";
                    try (PreparedStatement preparedStatement = con.prepareStatement(updateQuery)) {
                        preparedStatement.setString(1, newValue);
                        preparedStatement.setString(2, entertainmentChargeId);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Entertainment Expence data updated successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Entertainment Expence not found or update failed.");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        }
    }
}




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choose;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
